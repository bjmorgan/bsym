import numpy as np

class SymmetryOperation:
    def __init__( self, matrix, label=None ):
        if isinstance( matrix, np.matrix ):
            self.matrix = matrix
        elif isinstance( matrix, np.ndarray ):
            self.matrix = np.matrix( matrix )
        elif isinstance( matrix, list):
            self.matrix = np.matrix( matrix )
        else:
            raise TypeError
        self.label = label

    def __mul__( self, other ):
        if isinstance( other, SymmetryOperation ):
            return( SymmetryOperation( self.matrix * other.matrix ) )
        else:
            return( SymmetryOperation( self.matrix * other ) )

    def invert( self ):
        return SymmetryOperation( np.linalg.inv( self.matrix ).astype( int ) )

    @classmethod
    def from_vector( cls, vector, count_from_zero = False ):
        if not count_from_zero:
            vector = [ element - 1 for element in vector ]
        dim = len( vector )
        new_symmetry_operation = cls( np.zeros( ( dim, dim ), dtype=int ) )
        for index, element in enumerate( vector ):
            new_symmetry_operation.matrix[ index, element ] = 1
        return new_symmetry_operation

    def similarity_transform( self, s ):
        return( s.invert() * self * s )

    def operate_on( self, configuration ):
        # returns the site occupation vector generated by applying this symmetry operation
        from symmetry import configuration as conf
        new_configuration = conf.Configuration( ( self.matrix * configuration ).tolist() )
        return( new_configuration )

    def character( self ):
        return np.trace( self.matrix )

    def as_vector( self, count_from_zero = False ):
        offset = 0 if count_from_zero else 1
        return( [ row.index( 1 ) + offset for row in self.matrix.tolist() ] )

    def set_label( self, label ):
        self.label = label
        return( self )

    def pprint( self ):
        label = self.label if self.label else '---'
        print( label + ' : ' + ' '.join( [ str(e) for e in self.as_vector() ] ) )
        
